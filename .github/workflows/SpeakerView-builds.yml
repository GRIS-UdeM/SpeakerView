name: "SpeakerView builds"
on: push

env:
  GODOT_VERSION: 4.3
  EXPORT_NAME: SpeakerView
  PROJECT_PATH: .

jobs:
  export-windows:
    name: Windows Export
    runs-on: ubuntu-24.04
    container:
      image: barichello/godot-ci:4.3
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates/
          mkdir -v -p ~/.config/
          mv /root/.config/godot ~/.config/godot
          mv /root/.local/share/godot/export_templates/${GODOT_VERSION}.stable ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable
      - name: Windows Build
        run: |
          mkdir -v -p build/windows
          EXPORT_DIR="$(readlink -f build)"
          cd $PROJECT_PATH
          godot --headless --verbose --export-release "Windows Desktop" "$EXPORT_DIR/windows/$EXPORT_NAME.exe"
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: build/windows

  export-linux-arm:
    name: Linux ARM Export
    runs-on: ubuntu-24.04
    container:
      image: barichello/godot-ci:4.3
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates/
          mv /root/.local/share/godot/export_templates/${GODOT_VERSION}.stable ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable
      - name: Linux Build
        run: |
          mkdir -v -p build/linuxarm
          EXPORT_DIR="$(readlink -f build)"
          cd $PROJECT_PATH
          godot --headless --verbose --export-release "LinuxARM" "$EXPORT_DIR/linuxarm/$EXPORT_NAME.arm64"
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linuxARM
          path: build/linuxarm

  export-linux:
    name: Linux Export
    runs-on: ubuntu-24.04
    container:
      image: barichello/godot-ci:4.3
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates/
          mv /root/.local/share/godot/export_templates/${GODOT_VERSION}.stable ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable
      - name: Linux Build
        run: |
          mkdir -v -p build/linux
          EXPORT_DIR="$(readlink -f build)"
          cd $PROJECT_PATH
          godot --headless --verbose --export-release "Linux" "$EXPORT_DIR/linux/$EXPORT_NAME.x86_64"
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: build/linux

  export-mac:
    name: Mac Export
    runs-on: ubuntu-24.04
    container:
      image: barichello/godot-ci:4.3
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates/
          mv /root/.local/share/godot/export_templates/${GODOT_VERSION}.stable ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable
      - name: Mac Build
        run: |
          mkdir -v -p build/mac
          EXPORT_DIR="$(readlink -f build)"
          cd $PROJECT_PATH
          godot --headless --verbose --export-release "macOS" "$EXPORT_DIR/mac/$EXPORT_NAME.zip"
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: mac
          path: build/mac

  sign-and-notarize-mac:
    needs: export-mac
    name: Sign and Notarize Mac
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: dl artifact
        uses: actions/download-artifact@v5
        with:
          name: mac
          path: artifact
      - name: Setup codesigning
        env:
          GLL_APPLE_DEVELOPER_ID_APPLICATION: ${{ secrets.GLL_APPLE_DEVELOPER_ID_APPLICATION }}
          GLL_APPLE_DEVELOPER_ID_INSTALLER: ${{ secrets.GLL_APPLE_DEVELOPER_ID_INSTALLER }}
          GLL_APPLE_DEVELOPER_ID_PASSWORD: ${{ secrets.GLL_APPLE_DEVELOPER_ID_PASSWORD }}
        run: |
          set +x
          if [[ -n "$GLL_APPLE_DEVELOPER_ID_APPLICATION" ]]; then
            echo "$GLL_APPLE_DEVELOPER_ID_APPLICATION" | base64 --decode > spatgris-app-cert.p12
            export CODESIGN_APP_SECUREFILEPATH=$PWD/spatgris-app-cert.p12
          fi
          if [[ -n "$GLL_APPLE_DEVELOPER_ID_INSTALLER" ]]; then
            echo "$GLL_APPLE_DEVELOPER_ID_INSTALLER" | base64 --decode > spatgris-installer-cert.p12
            export CODESIGN_INSTALLER_SECUREFILEPATH=$PWD/spatgris-installer-cert.p12
          fi
          KEY_CHAIN=build.keychain
          security create-keychain -p github "$KEY_CHAIN"
          security default-keychain -s "$KEY_CHAIN"
          security unlock-keychain -p github "$KEY_CHAIN"
          if [[ -f "$CODESIGN_APP_SECUREFILEPATH" ]]; then
            security import "$CODESIGN_APP_SECUREFILEPATH" -A -k "$KEY_CHAIN" -P "$GLL_APPLE_DEVELOPER_ID_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security -T /usr/bin/pkgbuild  > /dev/null 2>&1
          fi
          if [[ -f "$CODESIGN_INSTALLER_SECUREFILEPATH" ]]; then
            security import "$CODESIGN_INSTALLER_SECUREFILEPATH" -A -k "$KEY_CHAIN" -P "$GLL_APPLE_DEVELOPER_ID_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security -T /usr/bin/pkgbuild  > /dev/null 2>&1
          fi
          security set-key-partition-list -S apple-tool:,apple: -s -k github "$KEY_CHAIN"
          rm -f "$CODESIGN_APP_SECUREFILEPATH" "$CODESIGN_INSTALLER_SECUREFILEPATH"
          set -x
      - name: Notarize and Sign
        env:
          MACOSX_SIGNATURE_IDENTITY: "Developer ID Installer: Gael Lane Lepine (62PMMWH49Z)"
          MACOSX_BUNDLE_ID: "ca.umontreal.musique.gris.speakerview"
          MACOSX_APPLE_ID: "glanelepine@gmail.com"
          MACOSX_APPLE_PASSWORD: ${{ secrets.GLL_APPLE_APP_PASSWORD }}
        run: |
          # apparently necessary or else some state is lost
          security unlock-keychain -p github build.keychain
          # unzip the zip file to get to the .app
          (unzip -a $GITHUB_WORKSPACE/artifact/$EXPORT_NAME.zip -d $GITHUB_WORKSPACE/artifact && rm $GITHUB_WORKSPACE/artifact/$EXPORT_NAME.zip)
          # sign and notarize the .app
          $GITHUB_WORKSPACE/.github/macosx-notarize.sh "$GITHUB_WORKSPACE/artifact/$EXPORT_NAME.app";

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: mac-signed-and-notarized
          path: artifact
